submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
res <- gather(students2,sex_class,count,-grade)
res
? separate
separate(res,sex_class,c(sex,class))
separate(res,sex_class,c("sex","class"))
submit()
students3
submit()
? spread
submit()
submit()
extract_numeric("class5")
submit()
students4
submit()
submit()
submit()
submit()
passed
failed
passed <- mutate(passed,status="passed")
failed <- mutate(failed,status="failed")
bind_rows(passed,failed)
sat
submit()
submit()
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
month(this_day)
wday(this_day)
wday(this_day,label=TRUE)
this_moment <- now()
this_moment
second(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment,now())
this_moment %>% update %>% now
this_moment %>% update %>% now()
this_moment <- update(this_moment,hours = 10, minutes = 16, seconds = 0)
this_moment
nyc <- now(tzone="America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart,hours=17,minutes=34)
depart
arrive <- depart +hours(15)+minutes(50)
?with_tz
with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008",tz="Singapore")
last_time
?new_interval
how_long <- new_interval(last_time,arrive)
as.period(how_long)
stopwatch()
new <- gsub("? "," \\1",Byd eductivismI u nderstanad m odeo f explanatiown hich)
new <- gsub("? "," \\1","Byd eductivismI u nderstanad m odeo f explanatiown hich")
new
txt <- c("The", "licenses", "for", "most", "software", "are",
"designed", "to", "take", "away", "your", "freedom",
"to", "share", "and", "change", "it.",
"", "By", "contrast,", "the", "GNU", "General", "Public", "License",
"is", "intended", "to", "guarantee", "your", "freedom", "to",
"share", "and", "change", "free", "software", "--",
"to", "make", "sure", "the", "software", "is",
"free", "for", "all", "its", "users")
txt
(ot <- sub("[b-e]",".", txt))
txt[ot != gsub("[b-e]",".", txt)]#- gsub does "global" substitution
gsub("[b-e]",".", txt)
gsub("(\\w)(\\w*)", "\\U\\1\\L\\2", txt, perl=TRUE)
new <- gsub(". "," \\1","Byd eductivismI u nderstanad m odeo f explanatiown hich")
new
new <- gsub("[.] "," \\1","Byd eductivismI u nderstanad m odeo f explanatiown hich")
new
new <- gsub("(.) "," \\1","Byd eductivismI u nderstanad m odeo f explanatiown hich")
new
source('D:/D_documents/MOOC/Coursera/04 Exploratory Data Analysis/quiz2.R')
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
head(BodyWeight)
str(BodyWeight)
print.trellis()
trellis.par.set()
par()
library(datasets)
data(airquality)
str(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
install.packages("swirl")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
install.packages("crayon")
library(swirl)
rm(list=ls())
install_from_swirl("Exploratory Data Analysis")
swirl()
install_from_swirl("Exploratory Data Analysis")
swirl()
install.packages("eurostatr")
install.packages("eurostat")
get_eurostat_toc()
library(eurostat)
get_eurostat_toc()
toc <- get_eurostat_toc()
write.csv(toc, "toc.csv")
bop <- get_eurostat_raw(bop_q_c)
get_eurostat_raw()
library(eurostat)
get_eurostat_dic(dictname)
bop <- get_eurostat(bop_q_c)
bop <- get_eurostat("bop_q_c")
dir.create("r_cache")
bop <- get_eurostat("bop_q_c", time_format = "date", cache = TRUE, update_cache = FALSE,cache_dir = "r_cache")
library(swirl)
seirl()
swirl()
(1/6)*1+(1/6)*2+(1/6)*3+(1/6)*4+(1/6)*5+(1/6)*6
expect_dice()
str(expect_dice())
View(expect_dice)
View(expect_dice)
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
.5*(edh+edl)
integrate(myfunc,0,2
)
spop
mean(spop)
allsam
apply(allsam,1,mean)
mean(smeans)
series <- "11a9995e4d9f3832892751cf2ebe5f4c"
from <- "03/01/2000"
to <- "06/30/2015"
url <- paste0("http://www.federalreserve.gov/datadownload/Output.aspx?rel=Z1&series=",series,
"&lastObs=&from=",from,"&to=",to,"&filetype=csv&label=include&layout=seriesrow")
url
flow_names <- c("Private Expenditure","Government Expenditure on Goods", "Government Expenditure on Serices","Exports: agriculture", "Exports:computers", "Exports: Other Goods and Services", "Imports: Oil", "Imports: computers", "Exports: Other Goods and Services", "Memo: GDP")
col_template <- vector(mode = "numeric",length = length(flow_names))
a5 <- data.frame(inc_exp = col_template, Production = col_template, Financial = col_template, General_Government = col_template, Interest_Pool = col_template, Foreign = col_template)
a5
a5 <- data.frame(inc_exp = col_template, Production = col_template, Financial = col_template, General_Government = col_template, Interest_Pool = col_template, Foreign = col_template, row.names = flow_names)
flow_names <- c("Private Expenditure","Government Expenditure on Goods", "Government Expenditure on Serices","Exports: agriculture", "Exports:computers", "Exports: Other Goods and Services", "Imports: Oil", "Imports: computers", "Imports: Other Goods and Services", "Memo: GDP")
col_template <- vector(mode = "numeric",length = length(flow_names))
a5 <- data.frame(inc_exp = col_template, Production = col_template, Financial = col_template, General_Government = col_template, Interest_Pool = col_template, Foreign = col_template, row.names = flow_names)
a5
library("swirl")
swirl()
lm(child~parent,galton)
fit <- lm(child ~ parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic<-fit$coef[1]
ols.slope<-fit$coef[2]
rhs-lhs
lhs-rhs
all.equal(lhs,rhs)
varChild <- var(galton$child)
varRes<-vvar(fit$residuals)
varRes<-var(fit$residuals)
varEst<-var(est(ols.slope,ols.ic))
all.equal(varChild,sum(varRes,varEst))
all.equal(varChild,varRes+varEst)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals,attenu$mag)
cov(efit$residuals,attenu$dist)
help()
x<-c(0.18,-1.54,0.42,0.95)
w<-c(2,1,3,1)
sm<-x*w
sm
sm<-sum(sm)
sm
sm<-sm/4
sm
mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
data(mtcars)
lm(mpg~weight)
lm(mpg~weoght,mtcars)
lm(mpg~weight,mtcars)
lm(mpg~wt,mtcars)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
mean(x)
sd(x)
(8.58-9.31)/0.7511325
setwd("D:/D_documents/00 PhD/Working Notes/006 Revisiting Godley99")
library(dplyr)
library(ggplot2)
# The gov't net saving values are in Z1 files S.7.a(A) and S.8.a(A), GDP is in S.1.a(A)
seriesCodes <- data.frame(S.1.a = "a28fd6ff58186c91e3e2987a889a772d",
S.7.a = "6edca435c2141aa8390b2a6854946677",
S.8.a = "6414b0705b484d2403bb0b1ef263072a",
S.9.a = "7ae4244e7d17dd16835f53f825485486",
f.105 = "848b989b9776e637e52f8b1a3a5b83a6")
get_file <- function(code){
url <- paste0("http://www.federalreserve.gov/datadownload/Output.aspx?rel=Z1&series=",
code,
"&lastObs=&from=01/01/1960&to=12/31/2015&filetype=csv&label=include&layout=seriesrow")
newfile <- read.csv (url, header = FALSE,stringsAsFactors = FALSE)
colnames(newfile) <- newfile[1,]
newfile <- rename(newfile, itemCode = `Series Name:`)
newfile <- select(newfile,-(2:5))[2:nrow(newfile),]
newfile
}
TotalEcon <- get_file(seriesCodes$S.1.a)
FedGov <- get_file(seriesCodes$S.7.a)
StateGov <- get_file(seriesCodes$S.8.a)
GenGov <- get_file(seriesCodes$f.105)
ROW <- get_file(seriesCodes$S.9.a)
Years <- colnames(select(ROW,`1960`:`2014`))
deflators <- read.csv("deflators.csv",skip = 4,header = FALSE,stringsAsFactors = FALSE)
deflators[1,2] <- "Description"
colnames(deflators) <- deflators[1,]
deflators <- filter(deflators,Line!="Line")
#    function trim: return string w/o leading or trailing whitespace
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
deflators$Description <- trim(deflators$Description)
#     get the deflator for GDP - line 1 of deflators
def_GDP <- as.numeric(select(deflators[1,],`1960`:`2014`))
#     get the deflator for Federal
def_Fed <- as.numeric(select(filter(deflators,Description=="Federal"),`1960`:`2014`))
#     get the deflator for State and local
def_State <- as.numeric(select(filter(deflators,Description=="State and local"),`1960`:`2014`))
#     get the deflator for gov't consumption
def_GenGov <- as.numeric(select(filter(deflators,
Description=="Government consumption expenditures and gross investment"),`1960`:`2014`))
GDP <- filter(TotalEcon, itemCode == "FA896902505.A")
View(GDP)
GDP <- unique.data.frame(filter(TotalEcon, itemCode == "FA896902505.A"))
View(GDP)
GDP <- unique(filter(TotalEcon, itemCode == "FA896902505.A"))
View(GDP)
GDP_def <- as.numeric(select(GDP,`1960`:`2014`)) / def_GDP
View(GDP)
GDP_def <- as.numeric(select(GDP,`1960`:`2014`)) / (1000 * def_GDP)
GDP_def[55]
17560110 / (1000*def_GDP[55])
GDP_def <- as.numeric(select(GDP,`1960`:`2014`)) / (10 * def_GDP)
GDP_def[55]
View(GenGov)
GenGov[itemCode == "FA366006085.A",]
GenGov[GenGov$itemCode == "FA366006085.A",]
GenGov[GenGov$itemCode == "FA366006005.A",]
GDP <- unique(filter(TotalEcon, itemCode == "FA896902505.A"))
#     Deflate GDP to get GDP_def using the GDP deflator def_GDP/100 and divide by 1000 to get billions
GDP_def <- as.numeric(select(GDP,`1960`:`2014`)) / (10 * def_GDP)
#     The gov't balance is in item code FA366006005.A in table GenGov
GenGov_balance <- unique(filter(GenGov, itemCode == "FA366006005.A"))
#     Deflate using the general gov consumption and investment deflator
GenGovBal_def <- as.numeric(GenGov_balance / (100 * def_GenGov))
#     Express as % of GDP
GenGovBal_pc <- 100 * GenGovBal_def / GDP_def
#     Plot % of GDP against years 1982-2014; 1982 is element 23 of the vector
Year <- Years[23:55]
Percent_of_GDP<-GenGovBal_pc[23:55]
fig1<- qplot(Year,Percent_of_GDP,stat="identity",position = "dodge",geom="bar")+
scale_x_discrete(breaks = seq(from=1982, to=2014, by=10))
GDP <- unique(filter(TotalEcon, itemCode == "FA896902505.A"))
#     Deflate GDP to get GDP_def using the GDP deflator def_GDP/100 and divide by 1000 to get billions
GDP_def <- as.numeric(select(GDP,`1960`:`2014`)) / (10 * def_GDP)
#     The gov't balance is in item code FA366006005.A in table GenGov
GenGov_balance <- unique(filter(GenGov, itemCode == "FA366006005.A"))
#     Deflate using the general gov consumption and investment deflator
GenGovBal_def <- as.numeric(select(GenGov_balance,`1960`:`2014`)) / (100 * def_GenGov))
#     Express as % of GDP
GenGovBal_pc <- 100 * GenGovBal_def / GDP_def
#     Plot % of GDP against years 1982-2014; 1982 is element 23 of the vector
Year <- Years[23:55]
Percent_of_GDP<-GenGovBal_pc[23:55]
fig1<- qplot(Year,Percent_of_GDP,stat="identity",position = "dodge",geom="bar")+
scale_x_discrete(breaks = seq(from=1982, to=2014, by=10))
GDP <- unique(filter(TotalEcon, itemCode == "FA896902505.A"))
#     Deflate GDP to get GDP_def using the GDP deflator def_GDP/100 and divide by 1000 to get billions
GDP_def <- as.numeric(select(GDP,`1960`:`2014`)) / (10 * def_GDP)
#     The gov't balance is in item code FA366006005.A in table GenGov
GenGov_balance <- unique(filter(GenGov, itemCode == "FA366006005.A"))
#     Deflate using the general gov consumption and investment deflator
GenGovBal_def <- as.numeric(select(GenGov_balance,`1960`:`2014`)) / (100 * def_GenGov)
#     Express as % of GDP
GenGovBal_pc <- 100 * GenGovBal_def / GDP_def
#     Plot % of GDP against years 1982-2014; 1982 is element 23 of the vector
Year <- Years[23:55]
Percent_of_GDP<-GenGovBal_pc[23:55]
fig1<- qplot(Year,Percent_of_GDP,stat="identity",position = "dodge",geom="bar")+
scale_x_discrete(breaks = seq(from=1982, to=2014, by=10))
fig1
GDP <- unique(filter(TotalEcon, itemCode == "FA896902505.A"))
#     Deflate GDP to get GDP_def using the GDP deflator def_GDP/100 and divide by 1000 to get billions
GDP_def <- as.numeric(select(GDP,`1960`:`2014`)) / (10 * def_GDP)
#     The gov't balance is in item code FA366006005.A in table GenGov
GenGov_balance <- unique(filter(GenGov, itemCode == "FA366006005.A"))
#     Deflate using the general gov consumption and investment deflator
GenGovBal_def <- as.numeric(select(GenGov_balance,`1960`:`2014`)) / (10 * def_GenGov)
#     Express as % of GDP
GenGovBal_pc <- 100 * GenGovBal_def / GDP_def
#     Plot % of GDP against years 1982-2014; 1982 is element 23 of the vector
Year <- Years[23:55]
Percent_of_GDP<-GenGovBal_pc[23:55]
fig1<- qplot(Year,Percent_of_GDP,stat="identity",position = "dodge",geom="bar")+
scale_x_discrete(breaks = seq(from=1982, to=2014, by=10))
fig1
ggsave("fig1.jpg",plot=fig1,width=9, height=9, units="cm")
GenGov_spend <- unique(filter(GenGov, itemCode == "FA366900015.A"))
#     Deflate by def_GovCons/100 and convert to billions
GenGovSpend_def <- as.numeric(select(GenGov_spend,`1960`:`2014`))/ (10 * def_GovCons)
#     Taxrate theta is total tax revenue as a % of income (gross or net?)
#     Get total tax revenue from F.105 itemCode FA366010115.A
GenGov_tax <- unique(filter(GenGov, itemCode == "FA366010115.A"))
GenGovTax_def <- as.numeric(select(GenGov_tax,`1960`:`2014`)) / (10 * def_GovCons)
#     For Income use net national income from table S.1.A itemCode FA896140001
NNI <- unique(filter(TotalEcon,itemCode =="FA896140001.A"))
NNI_def <- as.numeric(select(NNI,`1960`:`2014`)) / (10 * def_GDP)
#     Divide GenGov_tax by NNI to get theta
theta <- GenGovTax_def / NNI_def
#     the fiscal ratio is GenGov_spend / theta
fiscalRatio <- GenGovSpend_def / theta
#     merge fiscalRatio and GDP into a dataframe for plotting
plot_frame <- rbind(data.frame(series="fiscal-ratio",year=Years,
Billions_of_2009_dollars=fiscalRatio),
data.frame(series="gdp",year=Years,Billions_of_2009_dollars=GDP_def))
fig2 <- ggplot(plot_frame,aes(x=year,y=Billions_of_2009_dollars)) +
geom_line(aes(colour=series, group=series)) +
scale_x_discrete(breaks = seq(from=1960, to=2014, by=10)) +
theme(legend.position="top",legend.title=element_blank())
ggsave("fig2.jpg",plot=fig2,width=9, height=9, units="cm")
GenGov_spend <- unique(filter(GenGov, itemCode == "FA366900015.A"))
#     Deflate by def_GovCons/100 and convert to billions
GenGovSpend_def <- as.numeric(select(GenGov_spend,`1960`:`2014`))/ (10 * def_GenGov)
#     Taxrate theta is total tax revenue as a % of income (gross or net?)
#     Get total tax revenue from F.105 itemCode FA366010115.A
GenGov_tax <- unique(filter(GenGov, itemCode == "FA366010115.A"))
GenGovTax_def <- as.numeric(select(GenGov_tax,`1960`:`2014`)) / (10 * def_GDP)
#     For Income use net national income from table S.1.A itemCode FA896140001
NNI <- unique(filter(TotalEcon,itemCode =="FA896140001.A"))
NNI_def <- as.numeric(select(NNI,`1960`:`2014`)) / (10 * def_GDP)
#     Divide GenGov_tax by NNI to get theta
theta <- GenGovTax_def / NNI_def
#     the fiscal ratio is GenGov_spend / theta
fiscalRatio <- GenGovSpend_def / theta
#     merge fiscalRatio and GDP into a dataframe for plotting
plot_frame <- rbind(data.frame(series="fiscal-ratio",year=Years,
Billions_of_2009_dollars=fiscalRatio),
data.frame(series="gdp",year=Years,Billions_of_2009_dollars=GDP_def))
fig2 <- ggplot(plot_frame,aes(x=year,y=Billions_of_2009_dollars)) +
geom_line(aes(colour=series, group=series)) +
scale_x_discrete(breaks = seq(from=1960, to=2014, by=10)) +
theme(legend.position="top",legend.title=element_blank())
ggsave("fig2.jpg",plot=fig2,width=9, height=9, units="cm")
fig2
tradeData <- unique(filter(ROW, itemCode %in% c("FA266903011.A","FA266400201.A","FA266400101.A")))
tradeData <- select(tradeData,`1960`:`2014`)
View(tradeData)
tradeData <- unique(filter(ROW, itemCode %in% c("FA266903011.A","FA266400201.A","FA266400101.A")))
tradeData <- unique(filter(ROW, itemCode %in% c("FA266903011.A","FA266400201.A","FA266400101.A")))
exports <- tradeData[itemCode=="FA266903011.A",3:55] +
tradeData[itemCode=="FA266400201.A",3:55] -
tradeData[itemCode=="FA266400101.A",3:55]
tradeData <- unique(filter(ROW, itemCode %in% c("FA266903011.A","FA266400201.A","FA266400101.A")))
exports <- tradeData[tradeData$itemCode=="FA266903011.A",3:55] +
tradeData[tradeData$itemCode=="FA266400201.A",3:55] -
tradeData[tradeData$itemCode=="FA266400101.A",3:55]
View(exports)
imports <- unique(filter(ROW, itemCode == "FA266903001.A"))
def_Exp <- as.numeric(select(filter(deflators,Description=="Exports"),`1960`:`2014`))
#     get the deflator for imports
def_Exp <- as.numeric(select(filter(deflators,Description=="Imports"),`1960`:`2014`))
def_Imp <- as.numeric(select(filter(deflators,Description=="Imports"),`1960`:`2014`))
tradeData <- unique(filter(ROW, itemCode %in% c("FA266903011.A","FA266400201.A","FA266400101.A")))
exports <- tradeData[tradeData$itemCode=="FA266903011.A",3:55] +
tradeData[tradeData$itemCode=="FA266400201.A",3:55] -
tradeData[tradeData$itemCode=="FA266400101.A",3:55]
#     Deflate by def_Exp/100 and covert to billions
Exp_def <- as.numeric(exports)/ (10 * def_Exp)
#     For imports use FA266903001 "U.S. imports of goods and services"
imports <- as.numeric(select(unique(filter(ROW, itemCode == "FA266903001.A")),`1960`:`2014`))
#     Deflate by def_Imp/100 and covert to billions
Imp_def <- as.numeric(imports)/ (10 * def_Imp)
#     Average Import Propensity is imports / income.
mu <- Imp_def / NNI_def
#     The trade ratio is exports / mu
trade_ratio <- Exp_def / mu
#     merge fiscalRatio and GDP into a dataframe for plotting
plot_frame <- rbind(data.frame(series="trade-ratio",
year=years,
Billions_of_2009_dollars=trade_ratio),
data.frame(series="gdp",
year=years,
Billions_of_2009_dollars=GDP_def))
fig4 <- ggplot(plot_frame,aes(x=year,y=Amount)) +
geom_line(aes(colour=series, group=series)) +
scale_x_discrete(breaks = seq(from=1960, to=2014, by=10)) +
theme(legend.position="top",legend.title=element_blank())
ggsave("fig4.jpg",plot=fig4,width=9, height=9, units="cm")
tradeData <- unique(filter(ROW, itemCode %in% c("FA266903011.A","FA266400201.A","FA266400101.A")))
exports <- tradeData[tradeData$itemCode=="FA266903011.A",3:58] +
tradeData[tradeData$itemCode=="FA266400201.A",3:58] -
tradeData[tradeData$itemCode=="FA266400101.A",3:58]
#     Deflate by def_Exp/100 and covert to billions
Exp_def <- as.numeric(exports)/ (10 * def_Exp)
#     For imports use FA266903001 "U.S. imports of goods and services"
imports <- as.numeric(select(unique(filter(ROW, itemCode == "FA266903001.A")),`1960`:`2014`))
#     Deflate by def_Imp/100 and covert to billions
Imp_def <- as.numeric(imports)/ (10 * def_Imp)
#     Average Import Propensity is imports / income.
mu <- Imp_def / NNI_def
#     The trade ratio is exports / mu
trade_ratio <- Exp_def / mu
#     merge fiscalRatio and GDP into a dataframe for plotting
plot_frame <- rbind(data.frame(series="trade-ratio",
year=years,
Billions_of_2009_dollars=trade_ratio),
data.frame(series="gdp",
year=years,
Billions_of_2009_dollars=GDP_def))
fig4 <- ggplot(plot_frame,aes(x=year,y=Amount)) +
geom_line(aes(colour=series, group=series)) +
scale_x_discrete(breaks = seq(from=1960, to=2014, by=10)) +
theme(legend.position="top",legend.title=element_blank())
ggsave("fig4.jpg",plot=fig4,width=9, height=9, units="cm")
tradeData <- unique(filter(ROW, itemCode %in% c("FA266903011.A","FA266400201.A","FA266400101.A")))
exports <- tradeData[tradeData$itemCode=="FA266903011.A",3:57] +
tradeData[tradeData$itemCode=="FA266400201.A",3:57] -
tradeData[tradeData$itemCode=="FA266400101.A",3:57]
#     Deflate by def_Exp/100 and covert to billions
Exp_def <- as.numeric(exports)/ (10 * def_Exp)
#     For imports use FA266903001 "U.S. imports of goods and services"
imports <- as.numeric(select(unique(filter(ROW, itemCode == "FA266903001.A")),`1960`:`2014`))
#     Deflate by def_Imp/100 and covert to billions
Imp_def <- as.numeric(imports)/ (10 * def_Imp)
#     Average Import Propensity is imports / income.
mu <- Imp_def / NNI_def
#     The trade ratio is exports / mu
trade_ratio <- Exp_def / mu
#     merge fiscalRatio and GDP into a dataframe for plotting
plot_frame <- rbind(data.frame(series="trade-ratio",
year=years,
Billions_of_2009_dollars=trade_ratio),
data.frame(series="gdp",
year=years,
Billions_of_2009_dollars=GDP_def))
fig4 <- ggplot(plot_frame,aes(x=year,y=Amount)) +
geom_line(aes(colour=series, group=series)) +
scale_x_discrete(breaks = seq(from=1960, to=2014, by=10)) +
theme(legend.position="top",legend.title=element_blank())
ggsave("fig4.jpg",plot=fig4,width=9, height=9, units="cm")
plot_frame <- rbind(data.frame(series="trade-ratio",
year=Years,
Billions_of_2009_dollars=trade_ratio),
data.frame(series="gdp",
year=Years,
Billions_of_2009_dollars=GDP_def))
fig4 <- ggplot(plot_frame,aes(x=year,y=Billions_of_2009_dollars)) +
geom_line(aes(colour=series, group=series)) +
scale_x_discrete(breaks = seq(from=1960, to=2014, by=10)) +
theme(legend.position="top",legend.title=element_blank())
ggsave("fig4.jpg",plot=fig4,width=9, height=9, units="cm")
fig4
